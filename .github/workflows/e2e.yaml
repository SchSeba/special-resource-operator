name: e2e

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]
    paths-ignore:
      - "**/README.md"
  workflow_dispatch:

jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    if: (github.event.action == 'labeled' && github.event.label.name == 'ok-to-test') ||
        (github.event.pull_request.head.repo.full_name == 'openshift-psap/special-resource-operator')
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        persist-credentials: false
    - uses: actions/setup-go@v2
      with:
        go-version: '1.16.3'
    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 10
    - run: sudo apt-get install fuse-overlayfs
    - run: TAG=pr-${{ steps.short-sha.outputs.sha }} make local-image-build
    - uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD}}
    - run: TAG=pr-${{ steps.short-sha.outputs.sha }} make local-image-push
  e2e:
    name: test-e2e
    needs: build
    runs-on: ubuntu-latest
    if: (github.event.action == 'labeled' && github.event.label.name == 'ok-to-test') ||
        (github.event.pull_request.head.repo.full_name == 'openshift-psap/special-resource-operator')
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        persist-credentials: false
    - uses: actions/setup-go@v2
    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 10
    - uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_username: ${{ secrets.OPENSHIFT_USERNAME }}
        openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}
        insecure_skip_tls_verify: true
        namespace: default

    - run: |
        # sleep random sec 10 + RAND, no interlock
        SECS=$((10 + $RANDOM % 10))
        while true
        do
            lockstatus=$(oc get cm -n kube-system github.actions.lock || echo "nolock")
            if [ "$lockstatus" == "nolock" ]; then
                # lock does not exist
                oc create cm -n kube-system github.actions.lock

                echo "executing test-e2e"

                make undeploy                                                      || oc delete cm -n kube-system github.actions.lock; exit 1
                TAG=pr-${{ steps.short-sha.outputs.sha }} make go-deploy-manifests || oc delete cm -n kube-system github.actions.lock; exit 1
                make test-e2e                                                      || oc delete cm -n kube-system github.actions.lock; exit 1
                make go-undeploy-manifests                                         || oc delete cm -n kube-system github.actions.lock; exit 1

                oc delete cm -n kube-system github.actions.lock
                break
            fi
            echo "waiting for lock"
            sleep $SECS
        done
#    - run: make undeploy
#    - run: TAG=pr-${{ steps.short-sha.outputs.sha }} make go-deploy-manifests
#    - run: make test-e2e
#    - run: make go-undeploy-manifests
