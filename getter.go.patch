diff --git a/vendor/helm.sh/helm/v3/pkg/getter/getter.go b/vendor/helm.sh/helm/v3/pkg/getter/getter.go
index 46534845..fc041507 100644
--- a/vendor/helm.sh/helm/v3/pkg/getter/getter.go
+++ b/vendor/helm.sh/helm/v3/pkg/getter/getter.go
@@ -18,6 +18,10 @@ package getter
 
 import (
 	"bytes"
+	"fmt"
+	"io/ioutil"
+	"os"
+	"strings"
 	"time"
 
 	"github.com/pkg/errors"
@@ -170,8 +174,53 @@ var ociProvider = Provider{
 // Currently, the built-in getters and the discovered plugins with downloader
 // notations are collected.
 func All(settings *cli.EnvSettings) Providers {
-	result := Providers{httpProvider, ociProvider}
+	result := Providers{httpProvider, ociProvider, fileProvider}
 	pluginDownloaders, _ := collectPlugins(settings)
 	result = append(result, pluginDownloaders...)
 	return result
 }
+
+// PATCH GETTER START ----------------------------------------------------------
+var fileProvider = Provider{
+	Schemes: []string{"file"},
+	New:     NewFileGetter,
+}
+
+type FileGetter struct {
+}
+
+func (g *FileGetter) Get(href string, option ...Option) (*bytes.Buffer, error) {
+	fmt.Printf("GETTER GET %s\n", href)
+
+	ref := strings.TrimPrefix(href, "file://")
+
+	fmt.Printf("GET REF %s\n", ref)
+
+	if _, err := os.Stat(ref); err == nil {
+		file, err := ioutil.ReadFile(ref)
+		if err == nil {
+			return bytes.NewBuffer(file), nil
+		}
+
+	} else if os.IsNotExist(err) {
+		// path/to/whatever does *not* exist
+		fmt.Printf("ERROR FILE DOES NOT EXISTS %+v\n", err)
+		os.Exit(1)
+
+	} else {
+		// Schrodinger: file may or may not exist. See err for details.
+		// Therefore, do *NOT* use !os.IsNotExist(err) to test for file existence
+		fmt.Printf("ERROR SCHROEDINGER FILE  %+v\n", err)
+		os.Exit(1)
+	}
+
+	return nil, nil
+}
+
+func NewFileGetter(options ...Option) (Getter, error) {
+	var client FileGetter
+
+	return &client, nil
+}
+
+// PATCH GETTER END ----------------------------------------------------------
